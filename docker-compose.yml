services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TOKEN}
    restart: unless-stopped
    networks:
      - ory-net

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - ory-net

  # === Kratos Migration ===
  kratos-migrate:
    image: oryd/kratos:v1.1.0
    depends_on:
      - postgres
    entrypoint: >
      sh -c "
        kratos migrate sql -e --yes ||
        echo 'Kratos migrations already applied or failed — skipping...'
      "
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - ory-net

# === Hydra Migration ===
  hydra-migrate:
    image: oryd/hydra:v2.2.0
    depends_on:
      - postgres
    entrypoint: >
      sh -c "
        hydra migrate sql -e --yes ||
        echo 'Hydra migrations already applied or failed — skipping...'
      "
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - ory-net
# === Keto Migration ===
  keto-migrate:
    image: oryd/keto:v0.12.0
    depends_on:
      - postgres
    entrypoint: >
      sh -c "
        keto migrate sql -e --yes ||
        echo 'Keto migrations already applied or failed — skipping...'
      "
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - ory-net

# === ORY Kratos (Identity) ===
  kratos:
    image: oryd/kratos:v1.1.0
    depends_on:
      kratos-migrate:
        condition: service_completed_successfully
    ports:
      - "4433:4433" # Public
      - "4434:4434" # Admin
    volumes:
      - ./config/kratos:/etc/config/kratos
    command: serve --watch-courier --config /etc/config/kratos/kratos.yml
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      - SECRETS_DEFAULT=${KRATOS_SECRET}
      - LOG_LEVEL=debug
      - KRATOS_BROWSER_URL=http://localhost:4433
      - KRATOS_PUBLIC_URL=http://localhost:4433
      - KRATOS_ADMIN_URL=http://localhost:4434
      - KRATOS_SELF_SERVICE_URL=http://localhost:4434/self-service
    networks:
      - ory-net

# === ORY Hydra (OAuth2) ===
  hydra:
    image: oryd/hydra:v2.2.0
    depends_on:
      hydra-migrate:
        condition: service_completed_successfully
    ports:
      - "4444:4444" # Public
      - "4445:4445" # Admin
    volumes:
      - ./config/hydra:/etc/hydra
    command: serve all --dev
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      - SECRETS_SYSTEM=${HYDRA_SYSTEM_SECRET}
      - OIDC_SUBJECT_IDENTIFIERS_PAIRWISE_SALT=${HYDRA_SALT}
      - URLS_SELF_ISSUER=http://localhost:4444
      - URLS_CONSENT=http://localhost:3000/consent
      - URLS_LOGIN=http://localhost:3000/login
      - URLS_LOGOUT=http://localhost:3000/logout
      - SERVE_PUBLIC_PORT=4444
      - SERVE_ADMIN_PORT=4445
    networks:
      - ory-net

  # === ORY Keto (Permissions) ===
  keto:
    image: oryd/keto:v0.12.0
    depends_on:
      keto-migrate:
        condition: service_completed_successfully
    ports:
      - "4466:4466" # Read/Write API
      - "4467:4467" # Admin API
    volumes:
      - ./config/keto:/etc/keto
    command: serve --config /etc/keto/keto.yml
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      - LOG_LEVEL=debug
    networks:
      - ory-net

  hello-world:
    container_name: helloworld
    image: hashicorp/http-echo
    command: ["-text=Hello from Docker Compose!"]
    ports:
      - "8080:5678"   # expose to host on port 8080
    networks:
      - ory-net

networks:
  ory-net:
    driver: bridge

volumes:
  pgdata:
